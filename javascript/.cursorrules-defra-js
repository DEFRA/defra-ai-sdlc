## General Guidelines
- Use vanilla JavaScript; avoid TypeScript.
- Do not use front-end frameworks like React, Angular, or Vue.
- Ensure all code follows progressive enhancement principles.

## Code Style
- Use Standard JS for linting and formatting.
- Maintain consistent indentation and code structure.
- Avoid nested callbacks; prefer async/await.

## Version Control
- Store all code in a central Git repository.
- Use protected branches with required status checks.
- Make all changes on feature branches, not directly on the master branch.

## Testing
- Ensure unit test coverage is at least 90%.
- Do not merge code without passing all tests.
- Write meaningful tests for all new features and bug fixes.

## Code Reviews
- All code must be reviewed by another developer before merging.
- Keep commits small and focused on a single change or feature.

## Security
- Avoid embedding secrets in the codebase.
- Use environment variables for sensitive data.
- Validate all inputs to prevent injection attacks.

## Node.js Standards (if applicable)
- Do not store session state on the app server.
- Use distributed caches for session management.
- Follow the same standards for linting and formatting as front-end code.

## Best Practices
- Use clear and descriptive variable and function names.
- Document complex code with comments.
- Separate concerns by organizing code logically.







### Testing
- Test files should be co-located with source files and end in .test.js
- Use Jest as the testing framework
- Mock external dependencies explicitly
- Include comprehensive test cases covering success and error scenarios

### File Structure
- Group related functionality into directories (e.g., helpers, components)
- Use index.js files to aggregate and re-export from directories
- Keep files focused on a single responsibility
- Use .gitkeep for empty directories that need to be tracked

### Styling
- Use SCSS for styling
- Follow GOV.UK Frontend naming conventions for components
- Organize styles into:
  - components/ - For reusable components
  - core/ - For core layout elements
  - helpers/ - For mixins and functions
  - partials/ - For page-specific styles
  - variables/ - For shared variables
- Use BEM-style naming with 'app-' prefix for custom components

### Configuration
- Use convict for configuration management
- Environment variables should have sensible defaults
- Validate configuration on startup
- Separate configuration by concern (e.g., redis, session, logging)

### Error Handling
- Use explicit error types
- Log errors appropriately using the logging system
- Include stack traces in development but not production

### Logging
- Use pino as the logging framework
- Different log formats for development (pretty) and production (ECS)
- Include request ID in logs for tracing
- Redact sensitive information in production logs

### Documentation
- Include README.md files in major directories explaining purpose
- Use JSDoc for function and type documentation
- Document configuration options
- Include examples where appropriate

### Security
- Enable secure contexts in production
- Use TLS for Redis in production
- Implement proper session handling
- Set secure cookie flags in production

### Development Workflow
- Use npm scripts for common tasks
- Run linting and tests before commits (via husky)
- Format code using prettier
- Follow the established project structure for new features